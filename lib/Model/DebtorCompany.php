<?php
/**
 * DebtorCompany
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Billie Paella
 *
 * API Specification for Paella API
 *
 * OpenAPI spec version: 1.0
 * Contact: engineering@billie.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DebtorCompany Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DebtorCompany implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DebtorCompany';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_customer_id' => 'string',
        'name' => 'string',
        'address_house_number' => 'string',
        'address_street' => 'string',
        'address_addition' => 'string',
        'address_city' => 'string',
        'address_postal_code' => 'string',
        'address_country' => 'string',
        'industry_sector' => 'string',
        'subindustry_sector' => 'string',
        'legal_form' => 'string',
        'tax_id' => 'string',
        'tax_number' => 'string',
        'registration_number' => 'string',
        'established_customer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'merchant_customer_id' => null,
        'name' => null,
        'address_house_number' => null,
        'address_street' => null,
        'address_addition' => null,
        'address_city' => null,
        'address_postal_code' => null,
        'address_country' => null,
        'industry_sector' => null,
        'subindustry_sector' => null,
        'legal_form' => null,
        'tax_id' => null,
        'tax_number' => null,
        'registration_number' => null,
        'established_customer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_customer_id' => 'merchant_customer_id',
        'name' => 'name',
        'address_house_number' => 'address_house_number',
        'address_street' => 'address_street',
        'address_addition' => 'address_addition',
        'address_city' => 'address_city',
        'address_postal_code' => 'address_postal_code',
        'address_country' => 'address_country',
        'industry_sector' => 'industry_sector',
        'subindustry_sector' => 'subindustry_sector',
        'legal_form' => 'legal_form',
        'tax_id' => 'tax_id',
        'tax_number' => 'tax_number',
        'registration_number' => 'registration_number',
        'established_customer' => 'established_customer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_customer_id' => 'setMerchantCustomerId',
        'name' => 'setName',
        'address_house_number' => 'setAddressHouseNumber',
        'address_street' => 'setAddressStreet',
        'address_addition' => 'setAddressAddition',
        'address_city' => 'setAddressCity',
        'address_postal_code' => 'setAddressPostalCode',
        'address_country' => 'setAddressCountry',
        'industry_sector' => 'setIndustrySector',
        'subindustry_sector' => 'setSubindustrySector',
        'legal_form' => 'setLegalForm',
        'tax_id' => 'setTaxId',
        'tax_number' => 'setTaxNumber',
        'registration_number' => 'setRegistrationNumber',
        'established_customer' => 'setEstablishedCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_customer_id' => 'getMerchantCustomerId',
        'name' => 'getName',
        'address_house_number' => 'getAddressHouseNumber',
        'address_street' => 'getAddressStreet',
        'address_addition' => 'getAddressAddition',
        'address_city' => 'getAddressCity',
        'address_postal_code' => 'getAddressPostalCode',
        'address_country' => 'getAddressCountry',
        'industry_sector' => 'getIndustrySector',
        'subindustry_sector' => 'getSubindustrySector',
        'legal_form' => 'getLegalForm',
        'tax_id' => 'getTaxId',
        'tax_number' => 'getTaxNumber',
        'registration_number' => 'getRegistrationNumber',
        'established_customer' => 'getEstablishedCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_customer_id'] = isset($data['merchant_customer_id']) ? $data['merchant_customer_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address_house_number'] = isset($data['address_house_number']) ? $data['address_house_number'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_addition'] = isset($data['address_addition']) ? $data['address_addition'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_postal_code'] = isset($data['address_postal_code']) ? $data['address_postal_code'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['industry_sector'] = isset($data['industry_sector']) ? $data['industry_sector'] : null;
        $this->container['subindustry_sector'] = isset($data['subindustry_sector']) ? $data['subindustry_sector'] : null;
        $this->container['legal_form'] = isset($data['legal_form']) ? $data['legal_form'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['tax_number'] = isset($data['tax_number']) ? $data['tax_number'] : null;
        $this->container['registration_number'] = isset($data['registration_number']) ? $data['registration_number'] : null;
        $this->container['established_customer'] = isset($data['established_customer']) ? $data['established_customer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_customer_id'] === null) {
            $invalidProperties[] = "'merchant_customer_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['address_house_number'] === null) {
            $invalidProperties[] = "'address_house_number' can't be null";
        }
        if ($this->container['address_street'] === null) {
            $invalidProperties[] = "'address_street' can't be null";
        }
        if ($this->container['address_city'] === null) {
            $invalidProperties[] = "'address_city' can't be null";
        }
        if ($this->container['address_postal_code'] === null) {
            $invalidProperties[] = "'address_postal_code' can't be null";
        }
        if ($this->container['address_country'] === null) {
            $invalidProperties[] = "'address_country' can't be null";
        }
        if ($this->container['industry_sector'] === null) {
            $invalidProperties[] = "'industry_sector' can't be null";
        }
        if ($this->container['legal_form'] === null) {
            $invalidProperties[] = "'legal_form' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_customer_id
     *
     * @return string
     */
    public function getMerchantCustomerId()
    {
        return $this->container['merchant_customer_id'];
    }

    /**
     * Sets merchant_customer_id
     *
     * @param string $merchant_customer_id merchant_customer_id
     *
     * @return $this
     */
    public function setMerchantCustomerId($merchant_customer_id)
    {
        $this->container['merchant_customer_id'] = $merchant_customer_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address_house_number
     *
     * @return string
     */
    public function getAddressHouseNumber()
    {
        return $this->container['address_house_number'];
    }

    /**
     * Sets address_house_number
     *
     * @param string $address_house_number address_house_number
     *
     * @return $this
     */
    public function setAddressHouseNumber($address_house_number)
    {
        $this->container['address_house_number'] = $address_house_number;

        return $this;
    }

    /**
     * Gets address_street
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     *
     * @param string $address_street address_street
     *
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_addition
     *
     * @return string|null
     */
    public function getAddressAddition()
    {
        return $this->container['address_addition'];
    }

    /**
     * Sets address_addition
     *
     * @param string|null $address_addition address_addition
     *
     * @return $this
     */
    public function setAddressAddition($address_addition)
    {
        $this->container['address_addition'] = $address_addition;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param string $address_city address_city
     *
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_postal_code
     *
     * @return string
     */
    public function getAddressPostalCode()
    {
        return $this->container['address_postal_code'];
    }

    /**
     * Sets address_postal_code
     *
     * @param string $address_postal_code address_postal_code
     *
     * @return $this
     */
    public function setAddressPostalCode($address_postal_code)
    {
        $this->container['address_postal_code'] = $address_postal_code;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param string $address_country ISO-3166-1 alpha-2 country code
     *
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets industry_sector
     *
     * @return string
     */
    public function getIndustrySector()
    {
        return $this->container['industry_sector'];
    }

    /**
     * Sets industry_sector
     *
     * @param string $industry_sector industry_sector
     *
     * @return $this
     */
    public function setIndustrySector($industry_sector)
    {
        $this->container['industry_sector'] = $industry_sector;

        return $this;
    }

    /**
     * Gets subindustry_sector
     *
     * @return string|null
     */
    public function getSubindustrySector()
    {
        return $this->container['subindustry_sector'];
    }

    /**
     * Sets subindustry_sector
     *
     * @param string|null $subindustry_sector subindustry_sector
     *
     * @return $this
     */
    public function setSubindustrySector($subindustry_sector)
    {
        $this->container['subindustry_sector'] = $subindustry_sector;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return string
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param string $legal_form legal_form
     *
     * @return $this
     */
    public function setLegalForm($legal_form)
    {
        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id USt-ID
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string|null $tax_number tax_number
     *
     * @return $this
     */
    public function setTaxNumber($tax_number)
    {
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets registration_number
     *
     * @return string|null
     */
    public function getRegistrationNumber()
    {
        return $this->container['registration_number'];
    }

    /**
     * Sets registration_number
     *
     * @param string|null $registration_number registration_number
     *
     * @return $this
     */
    public function setRegistrationNumber($registration_number)
    {
        $this->container['registration_number'] = $registration_number;

        return $this;
    }

    /**
     * Gets established_customer
     *
     * @return bool|null
     */
    public function getEstablishedCustomer()
    {
        return $this->container['established_customer'];
    }

    /**
     * Sets established_customer
     *
     * @param bool|null $established_customer Either 1 or 0
     *
     * @return $this
     */
    public function setEstablishedCustomer($established_customer)
    {
        $this->container['established_customer'] = $established_customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


